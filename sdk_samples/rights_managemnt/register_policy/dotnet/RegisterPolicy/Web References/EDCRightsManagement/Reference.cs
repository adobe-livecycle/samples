//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
// 
#pragma warning disable 1591

namespace RegisterPolicy.EDCRightsManagement {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RightsManagementServiceSoapBinding", Namespace="http://adobe.com/idp/services")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Role))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RMSecureDocumentResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ValueMapSpec))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AuditSpec))]
    public partial class RightsManagementServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getLicenseIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback applyPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback inspectDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback protectDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback applyPolicyByPolicyIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback removePolicySecurityOperationCompleted;
        
        private System.Threading.SendOrPostCallback unlockPDFUsingPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback revokeLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback unrevokeLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateRevocationURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeLicensePolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback setLicenseAlternateIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLicenseByAlternateIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLicensesOperationCompleted;
        
        private System.Threading.SendOrPostCallback switchPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback registerWatermarkOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteWatermarkOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateWatermarkOperationCompleted;
        
        private System.Threading.SendOrPostCallback getWatermarkOperationCompleted;
        
        private System.Threading.SendOrPostCallback getWatermarkByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback registerPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback deletePolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteMyPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback updatePolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback updatePolicyFromSDKOperationCompleted;
        
        private System.Threading.SendOrPostCallback createPolicyFromTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPolicyByPolicyIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMyPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPoliciesOperationCompleted;
        
        private System.Threading.SendOrPostCallback changePolicyOwnerOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPolicyByAlternateIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback inviteExternalUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback resetExternalUserPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchForEventsOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteEventsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNumberOfSearchedEventsOperationCompleted;
        
        private System.Threading.SendOrPostCallback exportEventsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllPolicySetNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPolicyNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllWatermarkNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllDomainNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCustomPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback createPolicyFromExistingPolicyOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public RightsManagementServiceService() {
            this.Url = global::RegisterPolicy.Properties.Settings.Default.RegisterPolicy_EDCRightsManagement_RightsManagementServiceService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getLicenseIDCompletedEventHandler getLicenseIDCompleted;
        
        /// <remarks/>
        public event applyPolicyCompletedEventHandler applyPolicyCompleted;
        
        /// <remarks/>
        public event inspectDocumentCompletedEventHandler inspectDocumentCompleted;
        
        /// <remarks/>
        public event protectDocumentCompletedEventHandler protectDocumentCompleted;
        
        /// <remarks/>
        public event applyPolicyByPolicyIdCompletedEventHandler applyPolicyByPolicyIdCompleted;
        
        /// <remarks/>
        public event removePolicySecurityCompletedEventHandler removePolicySecurityCompleted;
        
        /// <remarks/>
        public event unlockPDFUsingPolicyCompletedEventHandler unlockPDFUsingPolicyCompleted;
        
        /// <remarks/>
        public event getLicenseCompletedEventHandler getLicenseCompleted;
        
        /// <remarks/>
        public event revokeLicenseCompletedEventHandler revokeLicenseCompleted;
        
        /// <remarks/>
        public event unrevokeLicenseCompletedEventHandler unrevokeLicenseCompleted;
        
        /// <remarks/>
        public event updateRevocationURLCompletedEventHandler updateRevocationURLCompleted;
        
        /// <remarks/>
        public event changeLicensePolicyCompletedEventHandler changeLicensePolicyCompleted;
        
        /// <remarks/>
        public event setLicenseAlternateIdCompletedEventHandler setLicenseAlternateIdCompleted;
        
        /// <remarks/>
        public event getLicenseByAlternateIdCompletedEventHandler getLicenseByAlternateIdCompleted;
        
        /// <remarks/>
        public event getLicensesCompletedEventHandler getLicensesCompleted;
        
        /// <remarks/>
        public event switchPolicyCompletedEventHandler switchPolicyCompleted;
        
        /// <remarks/>
        public event registerWatermarkCompletedEventHandler registerWatermarkCompleted;
        
        /// <remarks/>
        public event deleteWatermarkCompletedEventHandler deleteWatermarkCompleted;
        
        /// <remarks/>
        public event updateWatermarkCompletedEventHandler updateWatermarkCompleted;
        
        /// <remarks/>
        public event getWatermarkCompletedEventHandler getWatermarkCompleted;
        
        /// <remarks/>
        public event getWatermarkByNameCompletedEventHandler getWatermarkByNameCompleted;
        
        /// <remarks/>
        public event registerPolicyCompletedEventHandler registerPolicyCompleted;
        
        /// <remarks/>
        public event deletePolicyCompletedEventHandler deletePolicyCompleted;
        
        /// <remarks/>
        public event deleteMyPolicyCompletedEventHandler deleteMyPolicyCompleted;
        
        /// <remarks/>
        public event updatePolicyCompletedEventHandler updatePolicyCompleted;
        
        /// <remarks/>
        public event updatePolicyFromSDKCompletedEventHandler updatePolicyFromSDKCompleted;
        
        /// <remarks/>
        public event createPolicyFromTemplateCompletedEventHandler createPolicyFromTemplateCompleted;
        
        /// <remarks/>
        public event getPolicyByPolicyIdCompletedEventHandler getPolicyByPolicyIdCompleted;
        
        /// <remarks/>
        public event getPolicyCompletedEventHandler getPolicyCompleted;
        
        /// <remarks/>
        public event getMyPolicyCompletedEventHandler getMyPolicyCompleted;
        
        /// <remarks/>
        public event getPoliciesCompletedEventHandler getPoliciesCompleted;
        
        /// <remarks/>
        public event changePolicyOwnerCompletedEventHandler changePolicyOwnerCompleted;
        
        /// <remarks/>
        public event getPolicyByAlternateIdCompletedEventHandler getPolicyByAlternateIdCompleted;
        
        /// <remarks/>
        public event inviteExternalUsersCompletedEventHandler inviteExternalUsersCompleted;
        
        /// <remarks/>
        public event resetExternalUserPasswordCompletedEventHandler resetExternalUserPasswordCompleted;
        
        /// <remarks/>
        public event searchForEventsCompletedEventHandler searchForEventsCompleted;
        
        /// <remarks/>
        public event deleteEventsCompletedEventHandler deleteEventsCompleted;
        
        /// <remarks/>
        public event getNumberOfSearchedEventsCompletedEventHandler getNumberOfSearchedEventsCompleted;
        
        /// <remarks/>
        public event exportEventsCompletedEventHandler exportEventsCompleted;
        
        /// <remarks/>
        public event getAllPolicySetNamesCompletedEventHandler getAllPolicySetNamesCompleted;
        
        /// <remarks/>
        public event getPolicyNamesCompletedEventHandler getPolicyNamesCompleted;
        
        /// <remarks/>
        public event getAllWatermarkNamesCompletedEventHandler getAllWatermarkNamesCompleted;
        
        /// <remarks/>
        public event getAllDomainNamesCompletedEventHandler getAllDomainNamesCompleted;
        
        /// <remarks/>
        public event getCustomPermissionsCompletedEventHandler getCustomPermissionsCompleted;
        
        /// <remarks/>
        public event createPolicyFromExistingPolicyCompletedEventHandler createPolicyFromExistingPolicyCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getLicenseID..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("licenseId")]
        public string getLicenseID(BLOB inPDFDoc) {
            object[] results = this.Invoke("getLicenseID", new object[] {
                        inPDFDoc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getLicenseIDAsync(BLOB inPDFDoc) {
            this.getLicenseIDAsync(inPDFDoc, null);
        }
        
        /// <remarks/>
        public void getLicenseIDAsync(BLOB inPDFDoc, object userState) {
            if ((this.getLicenseIDOperationCompleted == null)) {
                this.getLicenseIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLicenseIDOperationCompleted);
            }
            this.InvokeAsync("getLicenseID", new object[] {
                        inPDFDoc}, this.getLicenseIDOperationCompleted, userState);
        }
        
        private void OngetLicenseIDOperationCompleted(object arg) {
            if ((this.getLicenseIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLicenseIDCompleted(this, new getLicenseIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("applyPolicy..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("outPDFDoc")]
        public BLOB applyPolicy(BLOB inPDFDoc, string documentName, string policySetName, string policyName, string pubUsername, string pubDomain) {
            object[] results = this.Invoke("applyPolicy", new object[] {
                        inPDFDoc,
                        documentName,
                        policySetName,
                        policyName,
                        pubUsername,
                        pubDomain});
            return ((BLOB)(results[0]));
        }
        
        /// <remarks/>
        public void applyPolicyAsync(BLOB inPDFDoc, string documentName, string policySetName, string policyName, string pubUsername, string pubDomain) {
            this.applyPolicyAsync(inPDFDoc, documentName, policySetName, policyName, pubUsername, pubDomain, null);
        }
        
        /// <remarks/>
        public void applyPolicyAsync(BLOB inPDFDoc, string documentName, string policySetName, string policyName, string pubUsername, string pubDomain, object userState) {
            if ((this.applyPolicyOperationCompleted == null)) {
                this.applyPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnapplyPolicyOperationCompleted);
            }
            this.InvokeAsync("applyPolicy", new object[] {
                        inPDFDoc,
                        documentName,
                        policySetName,
                        policyName,
                        pubUsername,
                        pubDomain}, this.applyPolicyOperationCompleted, userState);
        }
        
        private void OnapplyPolicyOperationCompleted(object arg) {
            if ((this.applyPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.applyPolicyCompleted(this, new applyPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("inspectDocument..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("inspectResult")]
        public RMInspectResult inspectDocument(BLOB inDoc) {
            object[] results = this.Invoke("inspectDocument", new object[] {
                        inDoc});
            return ((RMInspectResult)(results[0]));
        }
        
        /// <remarks/>
        public void inspectDocumentAsync(BLOB inDoc) {
            this.inspectDocumentAsync(inDoc, null);
        }
        
        /// <remarks/>
        public void inspectDocumentAsync(BLOB inDoc, object userState) {
            if ((this.inspectDocumentOperationCompleted == null)) {
                this.inspectDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OninspectDocumentOperationCompleted);
            }
            this.InvokeAsync("inspectDocument", new object[] {
                        inDoc}, this.inspectDocumentOperationCompleted, userState);
        }
        
        private void OninspectDocumentOperationCompleted(object arg) {
            if ((this.inspectDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.inspectDocumentCompleted(this, new inspectDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("protectDocument..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ProtectedDocument")]
        public BLOB protectDocument(BLOB inDoc, string documentName, string policySetName, string policyName, string pubUsername, string pubDomain, RMLocale locale, [System.Xml.Serialization.XmlIgnoreAttribute()] bool localeSpecified, out string PolicyID, out string DocumentID, out string MimeType) {
            object[] results = this.Invoke("protectDocument", new object[] {
                        inDoc,
                        documentName,
                        policySetName,
                        policyName,
                        pubUsername,
                        pubDomain,
                        locale,
                        localeSpecified});
            PolicyID = ((string)(results[1]));
            DocumentID = ((string)(results[2]));
            MimeType = ((string)(results[3]));
            return ((BLOB)(results[0]));
        }
        
        /// <remarks/>
        public void protectDocumentAsync(BLOB inDoc, string documentName, string policySetName, string policyName, string pubUsername, string pubDomain, RMLocale locale, bool localeSpecified) {
            this.protectDocumentAsync(inDoc, documentName, policySetName, policyName, pubUsername, pubDomain, locale, localeSpecified, null);
        }
        
        /// <remarks/>
        public void protectDocumentAsync(BLOB inDoc, string documentName, string policySetName, string policyName, string pubUsername, string pubDomain, RMLocale locale, bool localeSpecified, object userState) {
            if ((this.protectDocumentOperationCompleted == null)) {
                this.protectDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprotectDocumentOperationCompleted);
            }
            this.InvokeAsync("protectDocument", new object[] {
                        inDoc,
                        documentName,
                        policySetName,
                        policyName,
                        pubUsername,
                        pubDomain,
                        locale,
                        localeSpecified}, this.protectDocumentOperationCompleted, userState);
        }
        
        private void OnprotectDocumentOperationCompleted(object arg) {
            if ((this.protectDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.protectDocumentCompleted(this, new protectDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("applyPolicyByPolicyId..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("outPDFDoc")]
        public BLOB applyPolicyByPolicyId(BLOB inPDFDoc, string documentName, string policyId, string pubUsername, string pubDomain) {
            object[] results = this.Invoke("applyPolicyByPolicyId", new object[] {
                        inPDFDoc,
                        documentName,
                        policyId,
                        pubUsername,
                        pubDomain});
            return ((BLOB)(results[0]));
        }
        
        /// <remarks/>
        public void applyPolicyByPolicyIdAsync(BLOB inPDFDoc, string documentName, string policyId, string pubUsername, string pubDomain) {
            this.applyPolicyByPolicyIdAsync(inPDFDoc, documentName, policyId, pubUsername, pubDomain, null);
        }
        
        /// <remarks/>
        public void applyPolicyByPolicyIdAsync(BLOB inPDFDoc, string documentName, string policyId, string pubUsername, string pubDomain, object userState) {
            if ((this.applyPolicyByPolicyIdOperationCompleted == null)) {
                this.applyPolicyByPolicyIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnapplyPolicyByPolicyIdOperationCompleted);
            }
            this.InvokeAsync("applyPolicyByPolicyId", new object[] {
                        inPDFDoc,
                        documentName,
                        policyId,
                        pubUsername,
                        pubDomain}, this.applyPolicyByPolicyIdOperationCompleted, userState);
        }
        
        private void OnapplyPolicyByPolicyIdOperationCompleted(object arg) {
            if ((this.applyPolicyByPolicyIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.applyPolicyByPolicyIdCompleted(this, new applyPolicyByPolicyIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("removePolicySecurity..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("outPDFDoc")]
        public BLOB removePolicySecurity(BLOB inPDFDoc) {
            object[] results = this.Invoke("removePolicySecurity", new object[] {
                        inPDFDoc});
            return ((BLOB)(results[0]));
        }
        
        /// <remarks/>
        public void removePolicySecurityAsync(BLOB inPDFDoc) {
            this.removePolicySecurityAsync(inPDFDoc, null);
        }
        
        /// <remarks/>
        public void removePolicySecurityAsync(BLOB inPDFDoc, object userState) {
            if ((this.removePolicySecurityOperationCompleted == null)) {
                this.removePolicySecurityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremovePolicySecurityOperationCompleted);
            }
            this.InvokeAsync("removePolicySecurity", new object[] {
                        inPDFDoc}, this.removePolicySecurityOperationCompleted, userState);
        }
        
        private void OnremovePolicySecurityOperationCompleted(object arg) {
            if ((this.removePolicySecurityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removePolicySecurityCompleted(this, new removePolicySecurityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("unlockPDFUsingPolicy..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("outPDFDoc")]
        public BLOB unlockPDFUsingPolicy(BLOB inPDFDoc) {
            object[] results = this.Invoke("unlockPDFUsingPolicy", new object[] {
                        inPDFDoc});
            return ((BLOB)(results[0]));
        }
        
        /// <remarks/>
        public void unlockPDFUsingPolicyAsync(BLOB inPDFDoc) {
            this.unlockPDFUsingPolicyAsync(inPDFDoc, null);
        }
        
        /// <remarks/>
        public void unlockPDFUsingPolicyAsync(BLOB inPDFDoc, object userState) {
            if ((this.unlockPDFUsingPolicyOperationCompleted == null)) {
                this.unlockPDFUsingPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnunlockPDFUsingPolicyOperationCompleted);
            }
            this.InvokeAsync("unlockPDFUsingPolicy", new object[] {
                        inPDFDoc}, this.unlockPDFUsingPolicyOperationCompleted, userState);
        }
        
        private void OnunlockPDFUsingPolicyOperationCompleted(object arg) {
            if ((this.unlockPDFUsingPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.unlockPDFUsingPolicyCompleted(this, new unlockPDFUsingPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getLicense..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("resultLicense")]
        public LicenseSpec getLicense(string licenseId) {
            object[] results = this.Invoke("getLicense", new object[] {
                        licenseId});
            return ((LicenseSpec)(results[0]));
        }
        
        /// <remarks/>
        public void getLicenseAsync(string licenseId) {
            this.getLicenseAsync(licenseId, null);
        }
        
        /// <remarks/>
        public void getLicenseAsync(string licenseId, object userState) {
            if ((this.getLicenseOperationCompleted == null)) {
                this.getLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLicenseOperationCompleted);
            }
            this.InvokeAsync("getLicense", new object[] {
                        licenseId}, this.getLicenseOperationCompleted, userState);
        }
        
        private void OngetLicenseOperationCompleted(object arg) {
            if ((this.getLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLicenseCompleted(this, new getLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("revokeLicense..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void revokeLicense(string licenseId, Reason reason, string revocationUrl) {
            this.Invoke("revokeLicense", new object[] {
                        licenseId,
                        reason,
                        revocationUrl});
        }
        
        /// <remarks/>
        public void revokeLicenseAsync(string licenseId, Reason reason, string revocationUrl) {
            this.revokeLicenseAsync(licenseId, reason, revocationUrl, null);
        }
        
        /// <remarks/>
        public void revokeLicenseAsync(string licenseId, Reason reason, string revocationUrl, object userState) {
            if ((this.revokeLicenseOperationCompleted == null)) {
                this.revokeLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrevokeLicenseOperationCompleted);
            }
            this.InvokeAsync("revokeLicense", new object[] {
                        licenseId,
                        reason,
                        revocationUrl}, this.revokeLicenseOperationCompleted, userState);
        }
        
        private void OnrevokeLicenseOperationCompleted(object arg) {
            if ((this.revokeLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.revokeLicenseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("unrevokeLicense..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void unrevokeLicense(string licenseId) {
            this.Invoke("unrevokeLicense", new object[] {
                        licenseId});
        }
        
        /// <remarks/>
        public void unrevokeLicenseAsync(string licenseId) {
            this.unrevokeLicenseAsync(licenseId, null);
        }
        
        /// <remarks/>
        public void unrevokeLicenseAsync(string licenseId, object userState) {
            if ((this.unrevokeLicenseOperationCompleted == null)) {
                this.unrevokeLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnunrevokeLicenseOperationCompleted);
            }
            this.InvokeAsync("unrevokeLicense", new object[] {
                        licenseId}, this.unrevokeLicenseOperationCompleted, userState);
        }
        
        private void OnunrevokeLicenseOperationCompleted(object arg) {
            if ((this.unrevokeLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.unrevokeLicenseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("updateRevocationURL..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void updateRevocationURL(string licenseId, string revocationUrl) {
            this.Invoke("updateRevocationURL", new object[] {
                        licenseId,
                        revocationUrl});
        }
        
        /// <remarks/>
        public void updateRevocationURLAsync(string licenseId, string revocationUrl) {
            this.updateRevocationURLAsync(licenseId, revocationUrl, null);
        }
        
        /// <remarks/>
        public void updateRevocationURLAsync(string licenseId, string revocationUrl, object userState) {
            if ((this.updateRevocationURLOperationCompleted == null)) {
                this.updateRevocationURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateRevocationURLOperationCompleted);
            }
            this.InvokeAsync("updateRevocationURL", new object[] {
                        licenseId,
                        revocationUrl}, this.updateRevocationURLOperationCompleted, userState);
        }
        
        private void OnupdateRevocationURLOperationCompleted(object arg) {
            if ((this.updateRevocationURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateRevocationURLCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("changeLicensePolicy..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void changeLicensePolicy(string licenseId, string newPolicySetName, string newPolicyName) {
            this.Invoke("changeLicensePolicy", new object[] {
                        licenseId,
                        newPolicySetName,
                        newPolicyName});
        }
        
        /// <remarks/>
        public void changeLicensePolicyAsync(string licenseId, string newPolicySetName, string newPolicyName) {
            this.changeLicensePolicyAsync(licenseId, newPolicySetName, newPolicyName, null);
        }
        
        /// <remarks/>
        public void changeLicensePolicyAsync(string licenseId, string newPolicySetName, string newPolicyName, object userState) {
            if ((this.changeLicensePolicyOperationCompleted == null)) {
                this.changeLicensePolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeLicensePolicyOperationCompleted);
            }
            this.InvokeAsync("changeLicensePolicy", new object[] {
                        licenseId,
                        newPolicySetName,
                        newPolicyName}, this.changeLicensePolicyOperationCompleted, userState);
        }
        
        private void OnchangeLicensePolicyOperationCompleted(object arg) {
            if ((this.changeLicensePolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeLicensePolicyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("setLicenseAlternateId..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setLicenseAlternateId(string licenseId, string alternateId) {
            this.Invoke("setLicenseAlternateId", new object[] {
                        licenseId,
                        alternateId});
        }
        
        /// <remarks/>
        public void setLicenseAlternateIdAsync(string licenseId, string alternateId) {
            this.setLicenseAlternateIdAsync(licenseId, alternateId, null);
        }
        
        /// <remarks/>
        public void setLicenseAlternateIdAsync(string licenseId, string alternateId, object userState) {
            if ((this.setLicenseAlternateIdOperationCompleted == null)) {
                this.setLicenseAlternateIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetLicenseAlternateIdOperationCompleted);
            }
            this.InvokeAsync("setLicenseAlternateId", new object[] {
                        licenseId,
                        alternateId}, this.setLicenseAlternateIdOperationCompleted, userState);
        }
        
        private void OnsetLicenseAlternateIdOperationCompleted(object arg) {
            if ((this.setLicenseAlternateIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setLicenseAlternateIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getLicenseByAlternateId..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("resultLicense")]
        public LicenseSpec getLicenseByAlternateId(string alternateId) {
            object[] results = this.Invoke("getLicenseByAlternateId", new object[] {
                        alternateId});
            return ((LicenseSpec)(results[0]));
        }
        
        /// <remarks/>
        public void getLicenseByAlternateIdAsync(string alternateId) {
            this.getLicenseByAlternateIdAsync(alternateId, null);
        }
        
        /// <remarks/>
        public void getLicenseByAlternateIdAsync(string alternateId, object userState) {
            if ((this.getLicenseByAlternateIdOperationCompleted == null)) {
                this.getLicenseByAlternateIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLicenseByAlternateIdOperationCompleted);
            }
            this.InvokeAsync("getLicenseByAlternateId", new object[] {
                        alternateId}, this.getLicenseByAlternateIdOperationCompleted, userState);
        }
        
        private void OngetLicenseByAlternateIdOperationCompleted(object arg) {
            if ((this.getLicenseByAlternateIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLicenseByAlternateIdCompleted(this, new getLicenseByAlternateIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getLicenses..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("resultLicenses")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)]
        public LicenseSpec[] getLicenses(LicenseSearchFilterSpec filter, int maxResults) {
            object[] results = this.Invoke("getLicenses", new object[] {
                        filter,
                        maxResults});
            return ((LicenseSpec[])(results[0]));
        }
        
        /// <remarks/>
        public void getLicensesAsync(LicenseSearchFilterSpec filter, int maxResults) {
            this.getLicensesAsync(filter, maxResults, null);
        }
        
        /// <remarks/>
        public void getLicensesAsync(LicenseSearchFilterSpec filter, int maxResults, object userState) {
            if ((this.getLicensesOperationCompleted == null)) {
                this.getLicensesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLicensesOperationCompleted);
            }
            this.InvokeAsync("getLicenses", new object[] {
                        filter,
                        maxResults}, this.getLicensesOperationCompleted, userState);
        }
        
        private void OngetLicensesOperationCompleted(object arg) {
            if ((this.getLicensesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLicensesCompleted(this, new getLicensesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("switchPolicy..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void switchPolicy(string licenseId, string newPolicySetName, string newPolicyName) {
            this.Invoke("switchPolicy", new object[] {
                        licenseId,
                        newPolicySetName,
                        newPolicyName});
        }
        
        /// <remarks/>
        public void switchPolicyAsync(string licenseId, string newPolicySetName, string newPolicyName) {
            this.switchPolicyAsync(licenseId, newPolicySetName, newPolicyName, null);
        }
        
        /// <remarks/>
        public void switchPolicyAsync(string licenseId, string newPolicySetName, string newPolicyName, object userState) {
            if ((this.switchPolicyOperationCompleted == null)) {
                this.switchPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnswitchPolicyOperationCompleted);
            }
            this.InvokeAsync("switchPolicy", new object[] {
                        licenseId,
                        newPolicySetName,
                        newPolicyName}, this.switchPolicyOperationCompleted, userState);
        }
        
        private void OnswitchPolicyOperationCompleted(object arg) {
            if ((this.switchPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.switchPolicyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("registerWatermark..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("resultWatermarkId")]
        public string registerWatermark(WatermarkSpec watermark) {
            object[] results = this.Invoke("registerWatermark", new object[] {
                        watermark});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void registerWatermarkAsync(WatermarkSpec watermark) {
            this.registerWatermarkAsync(watermark, null);
        }
        
        /// <remarks/>
        public void registerWatermarkAsync(WatermarkSpec watermark, object userState) {
            if ((this.registerWatermarkOperationCompleted == null)) {
                this.registerWatermarkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregisterWatermarkOperationCompleted);
            }
            this.InvokeAsync("registerWatermark", new object[] {
                        watermark}, this.registerWatermarkOperationCompleted, userState);
        }
        
        private void OnregisterWatermarkOperationCompleted(object arg) {
            if ((this.registerWatermarkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.registerWatermarkCompleted(this, new registerWatermarkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("deleteWatermark..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void deleteWatermark(string watermarkId) {
            this.Invoke("deleteWatermark", new object[] {
                        watermarkId});
        }
        
        /// <remarks/>
        public void deleteWatermarkAsync(string watermarkId) {
            this.deleteWatermarkAsync(watermarkId, null);
        }
        
        /// <remarks/>
        public void deleteWatermarkAsync(string watermarkId, object userState) {
            if ((this.deleteWatermarkOperationCompleted == null)) {
                this.deleteWatermarkOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteWatermarkOperationCompleted);
            }
            this.InvokeAsync("deleteWatermark", new object[] {
                        watermarkId}, this.deleteWatermarkOperationCompleted, userState);
        }
        
        private void OndeleteWatermarkOperationCompleted(object arg) {
            if ((this.deleteWatermarkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteWatermarkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("updateWatermark..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void updateWatermark(WatermarkSpec watermark) {
            this.Invoke("updateWatermark", new object[] {
                        watermark});
        }
        
        /// <remarks/>
        public void updateWatermarkAsync(WatermarkSpec watermark) {
            this.updateWatermarkAsync(watermark, null);
        }
        
        /// <remarks/>
        public void updateWatermarkAsync(WatermarkSpec watermark, object userState) {
            if ((this.updateWatermarkOperationCompleted == null)) {
                this.updateWatermarkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateWatermarkOperationCompleted);
            }
            this.InvokeAsync("updateWatermark", new object[] {
                        watermark}, this.updateWatermarkOperationCompleted, userState);
        }
        
        private void OnupdateWatermarkOperationCompleted(object arg) {
            if ((this.updateWatermarkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateWatermarkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getWatermark..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("resultWatermark")]
        public WatermarkSpec getWatermark(string watermarkId) {
            object[] results = this.Invoke("getWatermark", new object[] {
                        watermarkId});
            return ((WatermarkSpec)(results[0]));
        }
        
        /// <remarks/>
        public void getWatermarkAsync(string watermarkId) {
            this.getWatermarkAsync(watermarkId, null);
        }
        
        /// <remarks/>
        public void getWatermarkAsync(string watermarkId, object userState) {
            if ((this.getWatermarkOperationCompleted == null)) {
                this.getWatermarkOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetWatermarkOperationCompleted);
            }
            this.InvokeAsync("getWatermark", new object[] {
                        watermarkId}, this.getWatermarkOperationCompleted, userState);
        }
        
        private void OngetWatermarkOperationCompleted(object arg) {
            if ((this.getWatermarkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getWatermarkCompleted(this, new getWatermarkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getWatermarkByName..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("resultWatermark")]
        public WatermarkSpec getWatermarkByName(string watermarkName) {
            object[] results = this.Invoke("getWatermarkByName", new object[] {
                        watermarkName});
            return ((WatermarkSpec)(results[0]));
        }
        
        /// <remarks/>
        public void getWatermarkByNameAsync(string watermarkName) {
            this.getWatermarkByNameAsync(watermarkName, null);
        }
        
        /// <remarks/>
        public void getWatermarkByNameAsync(string watermarkName, object userState) {
            if ((this.getWatermarkByNameOperationCompleted == null)) {
                this.getWatermarkByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetWatermarkByNameOperationCompleted);
            }
            this.InvokeAsync("getWatermarkByName", new object[] {
                        watermarkName}, this.getWatermarkByNameOperationCompleted, userState);
        }
        
        private void OngetWatermarkByNameOperationCompleted(object arg) {
            if ((this.getWatermarkByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getWatermarkByNameCompleted(this, new getWatermarkByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("registerPolicy..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void registerPolicy(PolicySpec policy, string policySetName) {
            this.Invoke("registerPolicy", new object[] {
                        policy,
                        policySetName});
        }
        
        /// <remarks/>
        public void registerPolicyAsync(PolicySpec policy, string policySetName) {
            this.registerPolicyAsync(policy, policySetName, null);
        }
        
        /// <remarks/>
        public void registerPolicyAsync(PolicySpec policy, string policySetName, object userState) {
            if ((this.registerPolicyOperationCompleted == null)) {
                this.registerPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregisterPolicyOperationCompleted);
            }
            this.InvokeAsync("registerPolicy", new object[] {
                        policy,
                        policySetName}, this.registerPolicyOperationCompleted, userState);
        }
        
        private void OnregisterPolicyOperationCompleted(object arg) {
            if ((this.registerPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.registerPolicyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("deletePolicy..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void deletePolicy(string policySetName, string policyName) {
            this.Invoke("deletePolicy", new object[] {
                        policySetName,
                        policyName});
        }
        
        /// <remarks/>
        public void deletePolicyAsync(string policySetName, string policyName) {
            this.deletePolicyAsync(policySetName, policyName, null);
        }
        
        /// <remarks/>
        public void deletePolicyAsync(string policySetName, string policyName, object userState) {
            if ((this.deletePolicyOperationCompleted == null)) {
                this.deletePolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeletePolicyOperationCompleted);
            }
            this.InvokeAsync("deletePolicy", new object[] {
                        policySetName,
                        policyName}, this.deletePolicyOperationCompleted, userState);
        }
        
        private void OndeletePolicyOperationCompleted(object arg) {
            if ((this.deletePolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deletePolicyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("deleteMyPolicy..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void deleteMyPolicy(string policyName, string ownerUsername, string ownerDomain) {
            this.Invoke("deleteMyPolicy", new object[] {
                        policyName,
                        ownerUsername,
                        ownerDomain});
        }
        
        /// <remarks/>
        public void deleteMyPolicyAsync(string policyName, string ownerUsername, string ownerDomain) {
            this.deleteMyPolicyAsync(policyName, ownerUsername, ownerDomain, null);
        }
        
        /// <remarks/>
        public void deleteMyPolicyAsync(string policyName, string ownerUsername, string ownerDomain, object userState) {
            if ((this.deleteMyPolicyOperationCompleted == null)) {
                this.deleteMyPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteMyPolicyOperationCompleted);
            }
            this.InvokeAsync("deleteMyPolicy", new object[] {
                        policyName,
                        ownerUsername,
                        ownerDomain}, this.deleteMyPolicyOperationCompleted, userState);
        }
        
        private void OndeleteMyPolicyOperationCompleted(object arg) {
            if ((this.deleteMyPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteMyPolicyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("updatePolicy..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void updatePolicy(string policySetName, string policyName, int offlineLeasePeriod, [System.Xml.Serialization.XmlIgnoreAttribute()] bool offlineLeasePeriodSpecified, [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)] object[] principalsToAdd, [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)] object[] principalsToRemove, string watermarkName) {
            this.Invoke("updatePolicy", new object[] {
                        policySetName,
                        policyName,
                        offlineLeasePeriod,
                        offlineLeasePeriodSpecified,
                        principalsToAdd,
                        principalsToRemove,
                        watermarkName});
        }
        
        /// <remarks/>
        public void updatePolicyAsync(string policySetName, string policyName, int offlineLeasePeriod, bool offlineLeasePeriodSpecified, object[] principalsToAdd, object[] principalsToRemove, string watermarkName) {
            this.updatePolicyAsync(policySetName, policyName, offlineLeasePeriod, offlineLeasePeriodSpecified, principalsToAdd, principalsToRemove, watermarkName, null);
        }
        
        /// <remarks/>
        public void updatePolicyAsync(string policySetName, string policyName, int offlineLeasePeriod, bool offlineLeasePeriodSpecified, object[] principalsToAdd, object[] principalsToRemove, string watermarkName, object userState) {
            if ((this.updatePolicyOperationCompleted == null)) {
                this.updatePolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdatePolicyOperationCompleted);
            }
            this.InvokeAsync("updatePolicy", new object[] {
                        policySetName,
                        policyName,
                        offlineLeasePeriod,
                        offlineLeasePeriodSpecified,
                        principalsToAdd,
                        principalsToRemove,
                        watermarkName}, this.updatePolicyOperationCompleted, userState);
        }
        
        private void OnupdatePolicyOperationCompleted(object arg) {
            if ((this.updatePolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updatePolicyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("updatePolicyFromSDK..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void updatePolicyFromSDK(PolicySpec updatedPolicy) {
            this.Invoke("updatePolicyFromSDK", new object[] {
                        updatedPolicy});
        }
        
        /// <remarks/>
        public void updatePolicyFromSDKAsync(PolicySpec updatedPolicy) {
            this.updatePolicyFromSDKAsync(updatedPolicy, null);
        }
        
        /// <remarks/>
        public void updatePolicyFromSDKAsync(PolicySpec updatedPolicy, object userState) {
            if ((this.updatePolicyFromSDKOperationCompleted == null)) {
                this.updatePolicyFromSDKOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdatePolicyFromSDKOperationCompleted);
            }
            this.InvokeAsync("updatePolicyFromSDK", new object[] {
                        updatedPolicy}, this.updatePolicyFromSDKOperationCompleted, userState);
        }
        
        private void OnupdatePolicyFromSDKOperationCompleted(object arg) {
            if ((this.updatePolicyFromSDKCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updatePolicyFromSDKCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("createPolicyFromTemplate..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void createPolicyFromTemplate(string newPolicySetName, string newPolicyName, string policySetName, string policyName, int offlineLeasePeriod, [System.Xml.Serialization.XmlIgnoreAttribute()] bool offlineLeasePeriodSpecified, [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)] object[] principalsToAdd, [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)] object[] principalsToRemove, string watermarkName) {
            this.Invoke("createPolicyFromTemplate", new object[] {
                        newPolicySetName,
                        newPolicyName,
                        policySetName,
                        policyName,
                        offlineLeasePeriod,
                        offlineLeasePeriodSpecified,
                        principalsToAdd,
                        principalsToRemove,
                        watermarkName});
        }
        
        /// <remarks/>
        public void createPolicyFromTemplateAsync(string newPolicySetName, string newPolicyName, string policySetName, string policyName, int offlineLeasePeriod, bool offlineLeasePeriodSpecified, object[] principalsToAdd, object[] principalsToRemove, string watermarkName) {
            this.createPolicyFromTemplateAsync(newPolicySetName, newPolicyName, policySetName, policyName, offlineLeasePeriod, offlineLeasePeriodSpecified, principalsToAdd, principalsToRemove, watermarkName, null);
        }
        
        /// <remarks/>
        public void createPolicyFromTemplateAsync(string newPolicySetName, string newPolicyName, string policySetName, string policyName, int offlineLeasePeriod, bool offlineLeasePeriodSpecified, object[] principalsToAdd, object[] principalsToRemove, string watermarkName, object userState) {
            if ((this.createPolicyFromTemplateOperationCompleted == null)) {
                this.createPolicyFromTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreatePolicyFromTemplateOperationCompleted);
            }
            this.InvokeAsync("createPolicyFromTemplate", new object[] {
                        newPolicySetName,
                        newPolicyName,
                        policySetName,
                        policyName,
                        offlineLeasePeriod,
                        offlineLeasePeriodSpecified,
                        principalsToAdd,
                        principalsToRemove,
                        watermarkName}, this.createPolicyFromTemplateOperationCompleted, userState);
        }
        
        private void OncreatePolicyFromTemplateOperationCompleted(object arg) {
            if ((this.createPolicyFromTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createPolicyFromTemplateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getPolicyByPolicyId..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("resultPolicy")]
        public PolicySpec getPolicyByPolicyId(string policyId) {
            object[] results = this.Invoke("getPolicyByPolicyId", new object[] {
                        policyId});
            return ((PolicySpec)(results[0]));
        }
        
        /// <remarks/>
        public void getPolicyByPolicyIdAsync(string policyId) {
            this.getPolicyByPolicyIdAsync(policyId, null);
        }
        
        /// <remarks/>
        public void getPolicyByPolicyIdAsync(string policyId, object userState) {
            if ((this.getPolicyByPolicyIdOperationCompleted == null)) {
                this.getPolicyByPolicyIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPolicyByPolicyIdOperationCompleted);
            }
            this.InvokeAsync("getPolicyByPolicyId", new object[] {
                        policyId}, this.getPolicyByPolicyIdOperationCompleted, userState);
        }
        
        private void OngetPolicyByPolicyIdOperationCompleted(object arg) {
            if ((this.getPolicyByPolicyIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPolicyByPolicyIdCompleted(this, new getPolicyByPolicyIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getPolicy..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("resultPolicy")]
        public PolicySpec getPolicy(string policySetName, string policyName) {
            object[] results = this.Invoke("getPolicy", new object[] {
                        policySetName,
                        policyName});
            return ((PolicySpec)(results[0]));
        }
        
        /// <remarks/>
        public void getPolicyAsync(string policySetName, string policyName) {
            this.getPolicyAsync(policySetName, policyName, null);
        }
        
        /// <remarks/>
        public void getPolicyAsync(string policySetName, string policyName, object userState) {
            if ((this.getPolicyOperationCompleted == null)) {
                this.getPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPolicyOperationCompleted);
            }
            this.InvokeAsync("getPolicy", new object[] {
                        policySetName,
                        policyName}, this.getPolicyOperationCompleted, userState);
        }
        
        private void OngetPolicyOperationCompleted(object arg) {
            if ((this.getPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPolicyCompleted(this, new getPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getMyPolicy..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("resultPolicy")]
        public PolicySpec getMyPolicy(string policyName, string ownerUsername, string ownerDomain) {
            object[] results = this.Invoke("getMyPolicy", new object[] {
                        policyName,
                        ownerUsername,
                        ownerDomain});
            return ((PolicySpec)(results[0]));
        }
        
        /// <remarks/>
        public void getMyPolicyAsync(string policyName, string ownerUsername, string ownerDomain) {
            this.getMyPolicyAsync(policyName, ownerUsername, ownerDomain, null);
        }
        
        /// <remarks/>
        public void getMyPolicyAsync(string policyName, string ownerUsername, string ownerDomain, object userState) {
            if ((this.getMyPolicyOperationCompleted == null)) {
                this.getMyPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMyPolicyOperationCompleted);
            }
            this.InvokeAsync("getMyPolicy", new object[] {
                        policyName,
                        ownerUsername,
                        ownerDomain}, this.getMyPolicyOperationCompleted, userState);
        }
        
        private void OngetMyPolicyOperationCompleted(object arg) {
            if ((this.getMyPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMyPolicyCompleted(this, new getMyPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getPolicies..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("resultPolicies")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)]
        public object[] getPolicies(PolicySearchFilterSpec filter, int maxResults) {
            object[] results = this.Invoke("getPolicies", new object[] {
                        filter,
                        maxResults});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void getPoliciesAsync(PolicySearchFilterSpec filter, int maxResults) {
            this.getPoliciesAsync(filter, maxResults, null);
        }
        
        /// <remarks/>
        public void getPoliciesAsync(PolicySearchFilterSpec filter, int maxResults, object userState) {
            if ((this.getPoliciesOperationCompleted == null)) {
                this.getPoliciesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPoliciesOperationCompleted);
            }
            this.InvokeAsync("getPolicies", new object[] {
                        filter,
                        maxResults}, this.getPoliciesOperationCompleted, userState);
        }
        
        private void OngetPoliciesOperationCompleted(object arg) {
            if ((this.getPoliciesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPoliciesCompleted(this, new getPoliciesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("changePolicyOwner..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void changePolicyOwner(string policyName, PrincipalReference existingOwner, PrincipalReference newOwner) {
            this.Invoke("changePolicyOwner", new object[] {
                        policyName,
                        existingOwner,
                        newOwner});
        }
        
        /// <remarks/>
        public void changePolicyOwnerAsync(string policyName, PrincipalReference existingOwner, PrincipalReference newOwner) {
            this.changePolicyOwnerAsync(policyName, existingOwner, newOwner, null);
        }
        
        /// <remarks/>
        public void changePolicyOwnerAsync(string policyName, PrincipalReference existingOwner, PrincipalReference newOwner, object userState) {
            if ((this.changePolicyOwnerOperationCompleted == null)) {
                this.changePolicyOwnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangePolicyOwnerOperationCompleted);
            }
            this.InvokeAsync("changePolicyOwner", new object[] {
                        policyName,
                        existingOwner,
                        newOwner}, this.changePolicyOwnerOperationCompleted, userState);
        }
        
        private void OnchangePolicyOwnerOperationCompleted(object arg) {
            if ((this.changePolicyOwnerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changePolicyOwnerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getPolicyByAlternateId..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("resultPolicy")]
        public PolicySpec getPolicyByAlternateId(string alternateId) {
            object[] results = this.Invoke("getPolicyByAlternateId", new object[] {
                        alternateId});
            return ((PolicySpec)(results[0]));
        }
        
        /// <remarks/>
        public void getPolicyByAlternateIdAsync(string alternateId) {
            this.getPolicyByAlternateIdAsync(alternateId, null);
        }
        
        /// <remarks/>
        public void getPolicyByAlternateIdAsync(string alternateId, object userState) {
            if ((this.getPolicyByAlternateIdOperationCompleted == null)) {
                this.getPolicyByAlternateIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPolicyByAlternateIdOperationCompleted);
            }
            this.InvokeAsync("getPolicyByAlternateId", new object[] {
                        alternateId}, this.getPolicyByAlternateIdOperationCompleted, userState);
        }
        
        private void OngetPolicyByAlternateIdOperationCompleted(object arg) {
            if ((this.getPolicyByAlternateIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPolicyByAlternateIdCompleted(this, new getPolicyByAlternateIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("inviteExternalUsers..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("resultUsers")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)]
        public object[] inviteExternalUsers([System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)] object[] emails) {
            object[] results = this.Invoke("inviteExternalUsers", new object[] {
                        emails});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void inviteExternalUsersAsync(object[] emails) {
            this.inviteExternalUsersAsync(emails, null);
        }
        
        /// <remarks/>
        public void inviteExternalUsersAsync(object[] emails, object userState) {
            if ((this.inviteExternalUsersOperationCompleted == null)) {
                this.inviteExternalUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OninviteExternalUsersOperationCompleted);
            }
            this.InvokeAsync("inviteExternalUsers", new object[] {
                        emails}, this.inviteExternalUsersOperationCompleted, userState);
        }
        
        private void OninviteExternalUsersOperationCompleted(object arg) {
            if ((this.inviteExternalUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.inviteExternalUsersCompleted(this, new inviteExternalUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("resetExternalUserPassword..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("result")]
        public bool resetExternalUserPassword(User user, string pwd) {
            object[] results = this.Invoke("resetExternalUserPassword", new object[] {
                        user,
                        pwd});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void resetExternalUserPasswordAsync(User user, string pwd) {
            this.resetExternalUserPasswordAsync(user, pwd, null);
        }
        
        /// <remarks/>
        public void resetExternalUserPasswordAsync(User user, string pwd, object userState) {
            if ((this.resetExternalUserPasswordOperationCompleted == null)) {
                this.resetExternalUserPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnresetExternalUserPasswordOperationCompleted);
            }
            this.InvokeAsync("resetExternalUserPassword", new object[] {
                        user,
                        pwd}, this.resetExternalUserPasswordOperationCompleted, userState);
        }
        
        private void OnresetExternalUserPasswordOperationCompleted(object arg) {
            if ((this.resetExternalUserPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.resetExternalUserPasswordCompleted(this, new resetExternalUserPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("searchForEvents..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("resultEvent")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)]
        public object[] searchForEvents(EventSpec @event, int maxResults) {
            object[] results = this.Invoke("searchForEvents", new object[] {
                        @event,
                        maxResults});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void searchForEventsAsync(EventSpec @event, int maxResults) {
            this.searchForEventsAsync(@event, maxResults, null);
        }
        
        /// <remarks/>
        public void searchForEventsAsync(EventSpec @event, int maxResults, object userState) {
            if ((this.searchForEventsOperationCompleted == null)) {
                this.searchForEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchForEventsOperationCompleted);
            }
            this.InvokeAsync("searchForEvents", new object[] {
                        @event,
                        maxResults}, this.searchForEventsOperationCompleted, userState);
        }
        
        private void OnsearchForEventsOperationCompleted(object arg) {
            if ((this.searchForEventsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchForEventsCompleted(this, new searchForEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("deleteEvents..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("numOfEventsDeleted")]
        public int deleteEvents(EventSpec @event) {
            object[] results = this.Invoke("deleteEvents", new object[] {
                        @event});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteEventsAsync(EventSpec @event) {
            this.deleteEventsAsync(@event, null);
        }
        
        /// <remarks/>
        public void deleteEventsAsync(EventSpec @event, object userState) {
            if ((this.deleteEventsOperationCompleted == null)) {
                this.deleteEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteEventsOperationCompleted);
            }
            this.InvokeAsync("deleteEvents", new object[] {
                        @event}, this.deleteEventsOperationCompleted, userState);
        }
        
        private void OndeleteEventsOperationCompleted(object arg) {
            if ((this.deleteEventsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteEventsCompleted(this, new deleteEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getNumberOfSearchedEvents..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("numOfEventsSearched")]
        public int getNumberOfSearchedEvents(EventSpec @event) {
            object[] results = this.Invoke("getNumberOfSearchedEvents", new object[] {
                        @event});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getNumberOfSearchedEventsAsync(EventSpec @event) {
            this.getNumberOfSearchedEventsAsync(@event, null);
        }
        
        /// <remarks/>
        public void getNumberOfSearchedEventsAsync(EventSpec @event, object userState) {
            if ((this.getNumberOfSearchedEventsOperationCompleted == null)) {
                this.getNumberOfSearchedEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNumberOfSearchedEventsOperationCompleted);
            }
            this.InvokeAsync("getNumberOfSearchedEvents", new object[] {
                        @event}, this.getNumberOfSearchedEventsOperationCompleted, userState);
        }
        
        private void OngetNumberOfSearchedEventsOperationCompleted(object arg) {
            if ((this.getNumberOfSearchedEventsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNumberOfSearchedEventsCompleted(this, new getNumberOfSearchedEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("exportEvents..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void exportEvents(EventSpec @event, string filePrefix, int maxRecordsPerFile, EventExportFileFormat fileFormat) {
            this.Invoke("exportEvents", new object[] {
                        @event,
                        filePrefix,
                        maxRecordsPerFile,
                        fileFormat});
        }
        
        /// <remarks/>
        public void exportEventsAsync(EventSpec @event, string filePrefix, int maxRecordsPerFile, EventExportFileFormat fileFormat) {
            this.exportEventsAsync(@event, filePrefix, maxRecordsPerFile, fileFormat, null);
        }
        
        /// <remarks/>
        public void exportEventsAsync(EventSpec @event, string filePrefix, int maxRecordsPerFile, EventExportFileFormat fileFormat, object userState) {
            if ((this.exportEventsOperationCompleted == null)) {
                this.exportEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnexportEventsOperationCompleted);
            }
            this.InvokeAsync("exportEvents", new object[] {
                        @event,
                        filePrefix,
                        maxRecordsPerFile,
                        fileFormat}, this.exportEventsOperationCompleted, userState);
        }
        
        private void OnexportEventsOperationCompleted(object arg) {
            if ((this.exportEventsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.exportEventsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getAllPolicySetNames..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("resultPolicySetNames")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)]
        public string[] getAllPolicySetNames() {
            object[] results = this.Invoke("getAllPolicySetNames", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAllPolicySetNamesAsync() {
            this.getAllPolicySetNamesAsync(null);
        }
        
        /// <remarks/>
        public void getAllPolicySetNamesAsync(object userState) {
            if ((this.getAllPolicySetNamesOperationCompleted == null)) {
                this.getAllPolicySetNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllPolicySetNamesOperationCompleted);
            }
            this.InvokeAsync("getAllPolicySetNames", new object[0], this.getAllPolicySetNamesOperationCompleted, userState);
        }
        
        private void OngetAllPolicySetNamesOperationCompleted(object arg) {
            if ((this.getAllPolicySetNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllPolicySetNamesCompleted(this, new getAllPolicySetNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getPolicyNames..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("resultPolicyNames")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)]
        public string[] getPolicyNames(string policySetName) {
            object[] results = this.Invoke("getPolicyNames", new object[] {
                        policySetName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getPolicyNamesAsync(string policySetName) {
            this.getPolicyNamesAsync(policySetName, null);
        }
        
        /// <remarks/>
        public void getPolicyNamesAsync(string policySetName, object userState) {
            if ((this.getPolicyNamesOperationCompleted == null)) {
                this.getPolicyNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPolicyNamesOperationCompleted);
            }
            this.InvokeAsync("getPolicyNames", new object[] {
                        policySetName}, this.getPolicyNamesOperationCompleted, userState);
        }
        
        private void OngetPolicyNamesOperationCompleted(object arg) {
            if ((this.getPolicyNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPolicyNamesCompleted(this, new getPolicyNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getAllWatermarkNames..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("resultWatermarkNames")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)]
        public string[] getAllWatermarkNames() {
            object[] results = this.Invoke("getAllWatermarkNames", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAllWatermarkNamesAsync() {
            this.getAllWatermarkNamesAsync(null);
        }
        
        /// <remarks/>
        public void getAllWatermarkNamesAsync(object userState) {
            if ((this.getAllWatermarkNamesOperationCompleted == null)) {
                this.getAllWatermarkNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllWatermarkNamesOperationCompleted);
            }
            this.InvokeAsync("getAllWatermarkNames", new object[0], this.getAllWatermarkNamesOperationCompleted, userState);
        }
        
        private void OngetAllWatermarkNamesOperationCompleted(object arg) {
            if ((this.getAllWatermarkNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllWatermarkNamesCompleted(this, new getAllWatermarkNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getAllDomainNames..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("resultDomainNames")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)]
        public string[] getAllDomainNames() {
            object[] results = this.Invoke("getAllDomainNames", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAllDomainNamesAsync() {
            this.getAllDomainNamesAsync(null);
        }
        
        /// <remarks/>
        public void getAllDomainNamesAsync(object userState) {
            if ((this.getAllDomainNamesOperationCompleted == null)) {
                this.getAllDomainNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllDomainNamesOperationCompleted);
            }
            this.InvokeAsync("getAllDomainNames", new object[0], this.getAllDomainNamesOperationCompleted, userState);
        }
        
        private void OngetAllDomainNamesOperationCompleted(object arg) {
            if ((this.getAllDomainNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllDomainNamesCompleted(this, new getAllDomainNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getCustomPermissions..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("resultCustomPermissions")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)]
        public string[] getCustomPermissions() {
            object[] results = this.Invoke("getCustomPermissions", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getCustomPermissionsAsync() {
            this.getCustomPermissionsAsync(null);
        }
        
        /// <remarks/>
        public void getCustomPermissionsAsync(object userState) {
            if ((this.getCustomPermissionsOperationCompleted == null)) {
                this.getCustomPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCustomPermissionsOperationCompleted);
            }
            this.InvokeAsync("getCustomPermissions", new object[0], this.getCustomPermissionsOperationCompleted, userState);
        }
        
        private void OngetCustomPermissionsOperationCompleted(object arg) {
            if ((this.getCustomPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCustomPermissionsCompleted(this, new getCustomPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("createPolicyFromExistingPolicy..9.0.0", RequestNamespace="http://adobe.com/idp/services", ResponseNamespace="http://adobe.com/idp/services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void createPolicyFromExistingPolicy(string policySetNameOfNewPolicy, string newPolicyName, string policySetNameOfExistingPolicy, string existingPolicyName, int offlineLeasePeriod, [System.Xml.Serialization.XmlIgnoreAttribute()] bool offlineLeasePeriodSpecified, DATE startingDate, DATE expirationDate, IUserlist principalsToAdd, [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)] object[] permissions, IUserlist principalsToRemove, string watermarkName) {
            this.Invoke("createPolicyFromExistingPolicy", new object[] {
                        policySetNameOfNewPolicy,
                        newPolicyName,
                        policySetNameOfExistingPolicy,
                        existingPolicyName,
                        offlineLeasePeriod,
                        offlineLeasePeriodSpecified,
                        startingDate,
                        expirationDate,
                        principalsToAdd,
                        permissions,
                        principalsToRemove,
                        watermarkName});
        }
        
        /// <remarks/>
        public void createPolicyFromExistingPolicyAsync(string policySetNameOfNewPolicy, string newPolicyName, string policySetNameOfExistingPolicy, string existingPolicyName, int offlineLeasePeriod, bool offlineLeasePeriodSpecified, DATE startingDate, DATE expirationDate, IUserlist principalsToAdd, object[] permissions, IUserlist principalsToRemove, string watermarkName) {
            this.createPolicyFromExistingPolicyAsync(policySetNameOfNewPolicy, newPolicyName, policySetNameOfExistingPolicy, existingPolicyName, offlineLeasePeriod, offlineLeasePeriodSpecified, startingDate, expirationDate, principalsToAdd, permissions, principalsToRemove, watermarkName, null);
        }
        
        /// <remarks/>
        public void createPolicyFromExistingPolicyAsync(string policySetNameOfNewPolicy, string newPolicyName, string policySetNameOfExistingPolicy, string existingPolicyName, int offlineLeasePeriod, bool offlineLeasePeriodSpecified, DATE startingDate, DATE expirationDate, IUserlist principalsToAdd, object[] permissions, IUserlist principalsToRemove, string watermarkName, object userState) {
            if ((this.createPolicyFromExistingPolicyOperationCompleted == null)) {
                this.createPolicyFromExistingPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreatePolicyFromExistingPolicyOperationCompleted);
            }
            this.InvokeAsync("createPolicyFromExistingPolicy", new object[] {
                        policySetNameOfNewPolicy,
                        newPolicyName,
                        policySetNameOfExistingPolicy,
                        existingPolicyName,
                        offlineLeasePeriod,
                        offlineLeasePeriodSpecified,
                        startingDate,
                        expirationDate,
                        principalsToAdd,
                        permissions,
                        principalsToRemove,
                        watermarkName}, this.createPolicyFromExistingPolicyOperationCompleted, userState);
        }
        
        private void OncreatePolicyFromExistingPolicyOperationCompleted(object arg) {
            if ((this.createPolicyFromExistingPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createPolicyFromExistingPolicyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class BLOB {
        
        private string contentTypeField;
        
        private byte[] binaryDataField;
        
        private string attachmentIDField;
        
        private string remoteURLField;
        
        private byte[] mTOMField;
        
        private string swaRefField;
        
        private MyMapOf_xsd_string_To_xsd_anyType_Item[] attributesField;
        
        /// <remarks/>
        public string contentType {
            get {
                return this.contentTypeField;
            }
            set {
                this.contentTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] binaryData {
            get {
                return this.binaryDataField;
            }
            set {
                this.binaryDataField = value;
            }
        }
        
        /// <remarks/>
        public string attachmentID {
            get {
                return this.attachmentIDField;
            }
            set {
                this.attachmentIDField = value;
            }
        }
        
        /// <remarks/>
        public string remoteURL {
            get {
                return this.remoteURLField;
            }
            set {
                this.remoteURLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] MTOM {
            get {
                return this.mTOMField;
            }
            set {
                this.mTOMField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")]
        public string swaRef {
            get {
                return this.swaRefField;
            }
            set {
                this.swaRefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)]
        public MyMapOf_xsd_string_To_xsd_anyType_Item[] attributes {
            get {
                return this.attributesField;
            }
            set {
                this.attributesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class MyMapOf_xsd_string_To_xsd_anyType_Item {
        
        private string keyField;
        
        private object valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RoleImpl))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class Role {
        
        private string descriptionField;
        
        private string idField;
        
        private bool mutableField;
        
        private string nameField;
        
        private string oidField;
        
        private string relAppNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public bool mutable {
            get {
                return this.mutableField;
            }
            set {
                this.mutableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string oid {
            get {
                return this.oidField;
            }
            set {
                this.oidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string relAppName {
            get {
                return this.relAppNameField;
            }
            set {
                this.relAppNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class RoleImpl : Role {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class RMSecureDocumentResult {
        
        private string licenseIdField;
        
        private string mimeTypeField;
        
        private string policyIdField;
        
        private BLOB protectedDocField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string licenseId {
            get {
                return this.licenseIdField;
            }
            set {
                this.licenseIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string mimeType {
            get {
                return this.mimeTypeField;
            }
            set {
                this.mimeTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string policyId {
            get {
                return this.policyIdField;
            }
            set {
                this.policyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public BLOB protectedDoc {
            get {
                return this.protectedDocField;
            }
            set {
                this.protectedDocField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class ValueMapSpec {
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class AuditSpec {
        
        private bool allowedField;
        
        private string eventCodeField;
        
        private string eventIdField;
        
        private string eventNameField;
        
        private string eventNamespaceField;
        
        private string licenseIdField;
        
        private string loginIdField;
        
        private DATE timestampField;
        
        private string userOidField;
        
        /// <remarks/>
        public bool allowed {
            get {
                return this.allowedField;
            }
            set {
                this.allowedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string eventCode {
            get {
                return this.eventCodeField;
            }
            set {
                this.eventCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string eventId {
            get {
                return this.eventIdField;
            }
            set {
                this.eventIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string eventName {
            get {
                return this.eventNameField;
            }
            set {
                this.eventNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string eventNamespace {
            get {
                return this.eventNamespaceField;
            }
            set {
                this.eventNamespaceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string licenseId {
            get {
                return this.licenseIdField;
            }
            set {
                this.licenseIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string loginId {
            get {
                return this.loginIdField;
            }
            set {
                this.loginIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DATE timestamp {
            get {
                return this.timestampField;
            }
            set {
                this.timestampField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string userOid {
            get {
                return this.userOidField;
            }
            set {
                this.userOidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class DATE {
        
        private System.DateTime dateField;
        
        private bool dateFieldSpecified;
        
        private System.DateTime calendarField;
        
        private bool calendarFieldSpecified;
        
        /// <remarks/>
        public System.DateTime date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dateSpecified {
            get {
                return this.dateFieldSpecified;
            }
            set {
                this.dateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime calendar {
            get {
                return this.calendarField;
            }
            set {
                this.calendarField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool calendarSpecified {
            get {
                return this.calendarFieldSpecified;
            }
            set {
                this.calendarFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class IUserlist {
        
        private IUserlistPrincipal[] principalField;
        
        private object[] principalsField;
        
        private object serviceCallField;
        
        private string serviceVersionField;
        
        private int typeField;
        
        private int versionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("principal", IsNullable=true)]
        public IUserlistPrincipal[] principal {
            get {
                return this.principalField;
            }
            set {
                this.principalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)]
        public object[] principals {
            get {
                return this.principalsField;
            }
            set {
                this.principalsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object serviceCall {
            get {
                return this.serviceCallField;
            }
            set {
                this.serviceCallField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string serviceVersion {
            get {
                return this.serviceVersionField;
            }
            set {
                this.serviceVersionField = value;
            }
        }
        
        /// <remarks/>
        public int type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public int version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class IUserlistPrincipal {
        
        private mapItem[] propertiesField;
        
        private string typeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Namespace="http://xml.apache.org/xml-soap", IsNullable=false)]
        public mapItem[] properties {
            get {
                return this.propertiesField;
            }
            set {
                this.propertiesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.apache.org/xml-soap")]
    public partial class mapItem {
        
        private object keyField;
        
        private object valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class EventSpec {
        
        private string documentIdField;
        
        private string eventCodeField;
        
        private string eventNameField;
        
        private string eventNamespaceField;
        
        private DATE firstTimeField;
        
        private DATE lastTimeField;
        
        private string policyIdField;
        
        private string userOidField;
        
        private System.Nullable<bool> wasAllowedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string documentId {
            get {
                return this.documentIdField;
            }
            set {
                this.documentIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string eventCode {
            get {
                return this.eventCodeField;
            }
            set {
                this.eventCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string eventName {
            get {
                return this.eventNameField;
            }
            set {
                this.eventNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string eventNamespace {
            get {
                return this.eventNamespaceField;
            }
            set {
                this.eventNamespaceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DATE firstTime {
            get {
                return this.firstTimeField;
            }
            set {
                this.firstTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DATE lastTime {
            get {
                return this.lastTimeField;
            }
            set {
                this.lastTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string policyId {
            get {
                return this.policyIdField;
            }
            set {
                this.policyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string userOid {
            get {
                return this.userOidField;
            }
            set {
                this.userOidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> wasAllowed {
            get {
                return this.wasAllowedField;
            }
            set {
                this.wasAllowedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrincipalReferenceImpl))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class PrincipalReference {
        
        private string canonicalNameField;
        
        private string commonNameField;
        
        private string domainCommonNameField;
        
        private string domainNameField;
        
        private string emailField;
        
        private string oidField;
        
        private string orgField;
        
        private string principalTypeField;
        
        private string statusField;
        
        private bool systemField;
        
        private int visibilityField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string canonicalName {
            get {
                return this.canonicalNameField;
            }
            set {
                this.canonicalNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string commonName {
            get {
                return this.commonNameField;
            }
            set {
                this.commonNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string domainCommonName {
            get {
                return this.domainCommonNameField;
            }
            set {
                this.domainCommonNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string domainName {
            get {
                return this.domainNameField;
            }
            set {
                this.domainNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string oid {
            get {
                return this.oidField;
            }
            set {
                this.oidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string org {
            get {
                return this.orgField;
            }
            set {
                this.orgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string principalType {
            get {
                return this.principalTypeField;
            }
            set {
                this.principalTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public bool system {
            get {
                return this.systemField;
            }
            set {
                this.systemField = value;
            }
        }
        
        /// <remarks/>
        public int visibility {
            get {
                return this.visibilityField;
            }
            set {
                this.visibilityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class PrincipalReferenceImpl : PrincipalReference {
        
        private bool isSystemField;
        
        /// <remarks/>
        public bool isSystem {
            get {
                return this.isSystemField;
            }
            set {
                this.isSystemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class PolicySearchFilterSpec {
        
        private bool asDocumentPublisherField;
        
        private bool fillPrincipalAttributesField;
        
        private string policyIdField;
        
        private string policyNameField;
        
        private Principal policyOwnerField;
        
        private string policySetNameField;
        
        private string policyTypeField;
        
        /// <remarks/>
        public bool asDocumentPublisher {
            get {
                return this.asDocumentPublisherField;
            }
            set {
                this.asDocumentPublisherField = value;
            }
        }
        
        /// <remarks/>
        public bool fillPrincipalAttributes {
            get {
                return this.fillPrincipalAttributesField;
            }
            set {
                this.fillPrincipalAttributesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string policyId {
            get {
                return this.policyIdField;
            }
            set {
                this.policyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string policyName {
            get {
                return this.policyNameField;
            }
            set {
                this.policyNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public Principal policyOwner {
            get {
                return this.policyOwnerField;
            }
            set {
                this.policyOwnerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string policySetName {
            get {
                return this.policySetNameField;
            }
            set {
                this.policySetNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string policyType {
            get {
                return this.policyTypeField;
            }
            set {
                this.policyTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(User))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UserImpl))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Group))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GroupImpl))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class Principal {
        
        private string canonicalNameField;
        
        private string commonNameField;
        
        private string descriptionField;
        
        private object[] directGroupMembershipsField;
        
        private string domainCommonNameField;
        
        private string domainNameField;
        
        private string emailField;
        
        private object[] emailAliasesField;
        
        private object[] groupMembershipsField;
        
        private bool localField;
        
        private bool lockedField;
        
        private string oidField;
        
        private string orgField;
        
        private string principalTypeField;
        
        private object[] roleMembershipField;
        
        private string statusField;
        
        private bool systemField;
        
        private DATE timestampCreatedField;
        
        private DATE timestampUpdatedField;
        
        private System.Nullable<int> visibilityField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string canonicalName {
            get {
                return this.canonicalNameField;
            }
            set {
                this.canonicalNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string commonName {
            get {
                return this.commonNameField;
            }
            set {
                this.commonNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)]
        public object[] directGroupMemberships {
            get {
                return this.directGroupMembershipsField;
            }
            set {
                this.directGroupMembershipsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string domainCommonName {
            get {
                return this.domainCommonNameField;
            }
            set {
                this.domainCommonNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string domainName {
            get {
                return this.domainNameField;
            }
            set {
                this.domainNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)]
        public object[] emailAliases {
            get {
                return this.emailAliasesField;
            }
            set {
                this.emailAliasesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)]
        public object[] groupMemberships {
            get {
                return this.groupMembershipsField;
            }
            set {
                this.groupMembershipsField = value;
            }
        }
        
        /// <remarks/>
        public bool local {
            get {
                return this.localField;
            }
            set {
                this.localField = value;
            }
        }
        
        /// <remarks/>
        public bool locked {
            get {
                return this.lockedField;
            }
            set {
                this.lockedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string oid {
            get {
                return this.oidField;
            }
            set {
                this.oidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string org {
            get {
                return this.orgField;
            }
            set {
                this.orgField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string principalType {
            get {
                return this.principalTypeField;
            }
            set {
                this.principalTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)]
        public object[] roleMembership {
            get {
                return this.roleMembershipField;
            }
            set {
                this.roleMembershipField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public bool system {
            get {
                return this.systemField;
            }
            set {
                this.systemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DATE timestampCreated {
            get {
                return this.timestampCreatedField;
            }
            set {
                this.timestampCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DATE timestampUpdated {
            get {
                return this.timestampUpdatedField;
            }
            set {
                this.timestampUpdatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> visibility {
            get {
                return this.visibilityField;
            }
            set {
                this.visibilityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UserImpl))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class User : Principal {
        
        private string businessCalendarKeyField;
        
        private bool disabledField;
        
        private string familyNameField;
        
        private string givenNameField;
        
        private string initialsField;
        
        private Locale localeField;
        
        private string postalAddressField;
        
        private string telephoneNumberField;
        
        private string timezoneField;
        
        private string useridField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string businessCalendarKey {
            get {
                return this.businessCalendarKeyField;
            }
            set {
                this.businessCalendarKeyField = value;
            }
        }
        
        /// <remarks/>
        public bool disabled {
            get {
                return this.disabledField;
            }
            set {
                this.disabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string familyName {
            get {
                return this.familyNameField;
            }
            set {
                this.familyNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string givenName {
            get {
                return this.givenNameField;
            }
            set {
                this.givenNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string initials {
            get {
                return this.initialsField;
            }
            set {
                this.initialsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public Locale locale {
            get {
                return this.localeField;
            }
            set {
                this.localeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string postalAddress {
            get {
                return this.postalAddressField;
            }
            set {
                this.postalAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string telephoneNumber {
            get {
                return this.telephoneNumberField;
            }
            set {
                this.telephoneNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string timezone {
            get {
                return this.timezoneField;
            }
            set {
                this.timezoneField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string userid {
            get {
                return this.useridField;
            }
            set {
                this.useridField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class Locale {
        
        private string languageField;
        
        private string countryField;
        
        private string variantField;
        
        /// <remarks/>
        public string language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
        
        /// <remarks/>
        public string country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        public string variant {
            get {
                return this.variantField;
            }
            set {
                this.variantField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class UserImpl : User {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GroupImpl))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class Group : Principal {
        
        private string groupTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string groupType {
            get {
                return this.groupTypeField;
            }
            set {
                this.groupTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class GroupImpl : Group {
        
        private bool mutableField;
        
        private string relAppNameField;
        
        /// <remarks/>
        public bool mutable {
            get {
                return this.mutableField;
            }
            set {
                this.mutableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string relAppName {
            get {
                return this.relAppNameField;
            }
            set {
                this.relAppNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class PolicySpec {
        
        private string accessDeniedErrorMessageField;
        
        private string alternateIdField;
        
        private bool autoGeneratedField;
        
        private DATE creationTimeField;
        
        private bool deletedField;
        
        private string descriptionField;
        
        private string encryptionAlgorithmAndKeySizeField;
        
        private DATE lastUpdateTimeField;
        
        private string nameField;
        
        private int offlineLeasePeriodField;
        
        private User ownerField;
        
        private string policyIdField;
        
        private string policySetNameField;
        
        private int policyTypeField;
        
        private string policyXmlField;
        
        private object[] principalsField;
        
        private string watermarkNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string accessDeniedErrorMessage {
            get {
                return this.accessDeniedErrorMessageField;
            }
            set {
                this.accessDeniedErrorMessageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string alternateId {
            get {
                return this.alternateIdField;
            }
            set {
                this.alternateIdField = value;
            }
        }
        
        /// <remarks/>
        public bool autoGenerated {
            get {
                return this.autoGeneratedField;
            }
            set {
                this.autoGeneratedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DATE creationTime {
            get {
                return this.creationTimeField;
            }
            set {
                this.creationTimeField = value;
            }
        }
        
        /// <remarks/>
        public bool deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string encryptionAlgorithmAndKeySize {
            get {
                return this.encryptionAlgorithmAndKeySizeField;
            }
            set {
                this.encryptionAlgorithmAndKeySizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DATE lastUpdateTime {
            get {
                return this.lastUpdateTimeField;
            }
            set {
                this.lastUpdateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int offlineLeasePeriod {
            get {
                return this.offlineLeasePeriodField;
            }
            set {
                this.offlineLeasePeriodField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public User owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string policyId {
            get {
                return this.policyIdField;
            }
            set {
                this.policyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string policySetName {
            get {
                return this.policySetNameField;
            }
            set {
                this.policySetNameField = value;
            }
        }
        
        /// <remarks/>
        public int policyType {
            get {
                return this.policyTypeField;
            }
            set {
                this.policyTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string policyXml {
            get {
                return this.policyXmlField;
            }
            set {
                this.policyXmlField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)]
        public object[] principals {
            get {
                return this.principalsField;
            }
            set {
                this.principalsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string watermarkName {
            get {
                return this.watermarkNameField;
            }
            set {
                this.watermarkNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class WatermarkSpec {
        
        private bool deletedField;
        
        private string idField;
        
        private string nameField;
        
        private object[] valuesField;
        
        /// <remarks/>
        public bool deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable=false)]
        public object[] values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class LicenseSearchFilterSpec {
        
        private DATE beginLicenseIssueDateField;
        
        private string documentNameField;
        
        private DATE endLicenseIssueDateField;
        
        private string policyIdField;
        
        private Principal publisherField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DATE beginLicenseIssueDate {
            get {
                return this.beginLicenseIssueDateField;
            }
            set {
                this.beginLicenseIssueDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string documentName {
            get {
                return this.documentNameField;
            }
            set {
                this.documentNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DATE endLicenseIssueDate {
            get {
                return this.endLicenseIssueDateField;
            }
            set {
                this.endLicenseIssueDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string policyId {
            get {
                return this.policyIdField;
            }
            set {
                this.policyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public Principal publisher {
            get {
                return this.publisherField;
            }
            set {
                this.publisherField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class LicenseSpec {
        
        private string alternateIdField;
        
        private string licenseXMLField;
        
        private int revocationReasonField;
        
        private string revocationURLField;
        
        private bool revokedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string alternateId {
            get {
                return this.alternateIdField;
            }
            set {
                this.alternateIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string licenseXML {
            get {
                return this.licenseXMLField;
            }
            set {
                this.licenseXMLField = value;
            }
        }
        
        /// <remarks/>
        public int revocationReason {
            get {
                return this.revocationReasonField;
            }
            set {
                this.revocationReasonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string revocationURL {
            get {
                return this.revocationURLField;
            }
            set {
                this.revocationURLField = value;
            }
        }
        
        /// <remarks/>
        public bool revoked {
            get {
                return this.revokedField;
            }
            set {
                this.revokedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public partial class RMInspectResult {
        
        private string alternateLicenseIdField;
        
        private string docNameField;
        
        private string licenseIdField;
        
        private string licenseIssuingAuthorityField;
        
        private string policyIdField;
        
        private string policyNameField;
        
        private string policySetIdField;
        
        private string policySetNameField;
        
        private string policyTypeField;
        
        private DATE publishTimeField;
        
        private string publisherIdField;
        
        private string publisherNameField;
        
        private string revokeURLField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string alternateLicenseId {
            get {
                return this.alternateLicenseIdField;
            }
            set {
                this.alternateLicenseIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string docName {
            get {
                return this.docNameField;
            }
            set {
                this.docNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string licenseId {
            get {
                return this.licenseIdField;
            }
            set {
                this.licenseIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string licenseIssuingAuthority {
            get {
                return this.licenseIssuingAuthorityField;
            }
            set {
                this.licenseIssuingAuthorityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string policyId {
            get {
                return this.policyIdField;
            }
            set {
                this.policyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string policyName {
            get {
                return this.policyNameField;
            }
            set {
                this.policyNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string policySetId {
            get {
                return this.policySetIdField;
            }
            set {
                this.policySetIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string policySetName {
            get {
                return this.policySetNameField;
            }
            set {
                this.policySetNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string policyType {
            get {
                return this.policyTypeField;
            }
            set {
                this.policyTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DATE publishTime {
            get {
                return this.publishTimeField;
            }
            set {
                this.publishTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string publisherId {
            get {
                return this.publisherIdField;
            }
            set {
                this.publisherIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string publisherName {
            get {
                return this.publisherNameField;
            }
            set {
                this.publisherNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string revokeURL {
            get {
                return this.revokeURLField;
            }
            set {
                this.revokeURLField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public enum RMLocale {
        
        /// <remarks/>
        en,
        
        /// <remarks/>
        fr,
        
        /// <remarks/>
        ja,
        
        /// <remarks/>
        de,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public enum Reason {
        
        /// <remarks/>
        DOCUMENT_REVISED,
        
        /// <remarks/>
        DOCUMENT_TERMINATED,
        
        /// <remarks/>
        GENERAL_MESSAGE,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://adobe.com/idp/services")]
    public enum EventExportFileFormat {
        
        /// <remarks/>
        CSV,
        
        /// <remarks/>
        XML,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getLicenseIDCompletedEventHandler(object sender, getLicenseIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLicenseIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLicenseIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void applyPolicyCompletedEventHandler(object sender, applyPolicyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class applyPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal applyPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BLOB Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BLOB)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void inspectDocumentCompletedEventHandler(object sender, inspectDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class inspectDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal inspectDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RMInspectResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RMInspectResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void protectDocumentCompletedEventHandler(object sender, protectDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class protectDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal protectDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BLOB Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BLOB)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string PolicyID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string DocumentID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string MimeType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void applyPolicyByPolicyIdCompletedEventHandler(object sender, applyPolicyByPolicyIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class applyPolicyByPolicyIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal applyPolicyByPolicyIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BLOB Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BLOB)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void removePolicySecurityCompletedEventHandler(object sender, removePolicySecurityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removePolicySecurityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removePolicySecurityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BLOB Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BLOB)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void unlockPDFUsingPolicyCompletedEventHandler(object sender, unlockPDFUsingPolicyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class unlockPDFUsingPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal unlockPDFUsingPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BLOB Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BLOB)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getLicenseCompletedEventHandler(object sender, getLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseSpec Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseSpec)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void revokeLicenseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void unrevokeLicenseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void updateRevocationURLCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void changeLicensePolicyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void setLicenseAlternateIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getLicenseByAlternateIdCompletedEventHandler(object sender, getLicenseByAlternateIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLicenseByAlternateIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLicenseByAlternateIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseSpec Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseSpec)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getLicensesCompletedEventHandler(object sender, getLicensesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLicensesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLicensesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseSpec[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseSpec[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void switchPolicyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void registerWatermarkCompletedEventHandler(object sender, registerWatermarkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class registerWatermarkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal registerWatermarkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void deleteWatermarkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void updateWatermarkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getWatermarkCompletedEventHandler(object sender, getWatermarkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getWatermarkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getWatermarkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WatermarkSpec Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WatermarkSpec)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getWatermarkByNameCompletedEventHandler(object sender, getWatermarkByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getWatermarkByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getWatermarkByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WatermarkSpec Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WatermarkSpec)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void registerPolicyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void deletePolicyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void deleteMyPolicyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void updatePolicyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void updatePolicyFromSDKCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void createPolicyFromTemplateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getPolicyByPolicyIdCompletedEventHandler(object sender, getPolicyByPolicyIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPolicyByPolicyIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPolicyByPolicyIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PolicySpec Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PolicySpec)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getPolicyCompletedEventHandler(object sender, getPolicyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PolicySpec Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PolicySpec)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getMyPolicyCompletedEventHandler(object sender, getMyPolicyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMyPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMyPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PolicySpec Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PolicySpec)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getPoliciesCompletedEventHandler(object sender, getPoliciesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPoliciesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPoliciesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void changePolicyOwnerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getPolicyByAlternateIdCompletedEventHandler(object sender, getPolicyByAlternateIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPolicyByAlternateIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPolicyByAlternateIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PolicySpec Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PolicySpec)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void inviteExternalUsersCompletedEventHandler(object sender, inviteExternalUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class inviteExternalUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal inviteExternalUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void resetExternalUserPasswordCompletedEventHandler(object sender, resetExternalUserPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class resetExternalUserPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal resetExternalUserPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void searchForEventsCompletedEventHandler(object sender, searchForEventsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchForEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchForEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void deleteEventsCompletedEventHandler(object sender, deleteEventsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getNumberOfSearchedEventsCompletedEventHandler(object sender, getNumberOfSearchedEventsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNumberOfSearchedEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNumberOfSearchedEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void exportEventsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getAllPolicySetNamesCompletedEventHandler(object sender, getAllPolicySetNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllPolicySetNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllPolicySetNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getPolicyNamesCompletedEventHandler(object sender, getPolicyNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPolicyNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPolicyNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getAllWatermarkNamesCompletedEventHandler(object sender, getAllWatermarkNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllWatermarkNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllWatermarkNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getAllDomainNamesCompletedEventHandler(object sender, getAllDomainNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllDomainNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllDomainNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getCustomPermissionsCompletedEventHandler(object sender, getCustomPermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCustomPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCustomPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void createPolicyFromExistingPolicyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591